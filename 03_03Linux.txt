Linux目录介绍
bin 存放二进制可执行文件
boot 存放系统引导时使用的各种文件
dev 存放设备文件
etc 存放系统配置文件
home 存放系统用户的文件
lib 存放程序运行所需的共享库和内核模块
opt 额外安装的可选应用程序包所放置的位置
root 超级用户目录
sbin 存放二进制可执行文件，只有root用户才能访问
tmp 存放临时文件
usr 存放系统应用程序
var 存放运行时需要改变数据的文件，例如日志文件

打包压缩命令 tar
作用：对文件进行打包、解包、压缩、解压
语法：tar [-zcxvf] fileName [files]
包文件后缀为.tar表示只是完成了打包，并没有压缩
包文件后缀为.tar.gz表示打包的同时还进行了压缩
说明：
-z：z代表的是gzip，通过gzip命令处理文件，gzip可以对文件压缩或者解压
-c：c代表的是create，即创建新的包文件
-x：x代表的是extract，实现从包文件中还原文件
-v：v代表的是verbose，显示命令的执行过程
-f：f代表的是file，用于指定包文件的名称

打包
tar -cvf hello.tar ./*          将当前目录下所有文件打包，打包后的文件名为hello.tar
tar -zcvf hello.tar.gz ./*          将当前目录下所有文件打包并压缩，打包后的文件名为hello.tar.gz
解包
tar -xvf hello.tar          将hello.tar文件进行解包，并将解包后的文件放在当前目录
tar -zxvf hello.tar.gz          将hello.tar.gz文件进行解压，并将解压后的文件放在当前目录
tar -zxvf hello.tar.gz -C /usr/local     将hello.tar.gz文件进行解压，并将解压后的文件放在

软件安装
安装jdk
操作步骤：
1、使用FinalShell自带的上传工具将jdk的二进制发布包上传到Linux
2、解压安装包，命令为tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/local
3、配置环境变量，使用vim命令修改/etc/profile文件，在文件末尾加入如下配置
    JAVA_HOME=/usr/local/jdk1.8.0_171
    PATH=$JAVA_HOME/bin:$PATH
4、重新加载profile文件，使更改的配置立即生效，命令为source /etc/profile
5、检查安装是否成功，命令为java -version


安装Tomcat
操作步骤：
1、使用FinalShell自带的上传工具将Tomcat的二进制发布包上传到Linux
2、解压安装包，命令为tar -zxvf apache-tomcat-7.0.57.tar.gz -C /usr/local
3、进入Tomcat的bin目录启动服务，命令为sh startup.sh或者./startup.sh


验证Tomcat启动是否成功，有多种方式：
查看启动日志   
    more /usr/local/apache-tomcat-7.0.57/logs/catalina.out
    tail -50 /usr/local/apache-tomcat-7.0.57/logs/catalina.out
查看进程   ps -ef | grep tomcat
注意：
ps命令是linux下非常强大的进程查看命令，通过ps -ef可以查看当前运行的所有进程的详细信息
“|”在Linux中称为管道符，可以将前一个命令的结果输出给后一个命令作为输入
使用ps命令查看进程时，经常配合管道符和查找命令 grep 一起使用，来查看特定进程


防火墙操作：
查看防火墙状态(systemctl status firewalld、firewall-cmd --state)
暂时关闭防火墙(systemctl stop firewalld)
永久关闭防火墙(systemctl disable firewalld)
开启防火墙(systemctl start firewalld)
开放指定端口(firewall-cmd --zone=public --add-port=8080/tcp --permanent)
关闭指定端口(firewall-cmd --zone=public --remove-port=8080/tcp --permanent)
立即生效(firewall-cmd --reload)
查看开放的端口(firewall-cmd --zone=public --list-ports)

注意：
1、systemctl是管理Linux中服务的命令，可以对服务进行启动、停止、重启、查看状态等操作
2、firewall-cmd是Linux中专门用于控制防火墙的命令
3、为了保证系统安全，服务器的防火墙不建议关闭

停止Tomcat服务的方式：
运行Tomcat的bin目录中提供的停止服务的脚本文件
sh shutdown.sh
./shutdown.sh
结束Tomcat进程
         查看Tomcat进程，获得进程id    
         执行命令结束进程 kill -9 7742            
注意：
kill命令是Linux提供的用于结束进程的命令，-9表示强制结束



安装MySQL
①：检测当前系统中是否安装MySQL数据库
rpm -qa                查询当前系统中安装的所有软件
rpm -qa | grep mysql            查询当前系统中安装的名称带mysql的软件
rpm -qa | grep mariadb        查询当前系统中安装的名称带mariadb的软件


RPM（Red-Hat Package Manager）RPM软件包管理器，是红帽Linux用于管理和安装软件的工具
如果当前系统中已经安装有MySQL数据库，安装将失败。CentOS7自带mariadb，与MySQL数据库冲突
②：卸载已经安装的冲突软件
rpm -e --nodeps 软件名称        卸载软件
rpm -e --nodeps mariadb-libs-5.5.60-1.el7_5.x86_64
③：将资料中提供的MySQL安装包上传到Linux并解压
mkdir /usr/local/mysql
tar -zxvf mysql-5.7.25-1.el7.x86_64.rpm-bundle.tar.gz -C /usr/local/mysql
说明：解压后得到6个rpm的安装包文件
④：按照顺序安装rpm软件包
rpm -ivh mysql-community-common-5.7.25-1.el7.x86_64.rpm
rpm -ivh mysql-community-libs-5.7.25-1.el7.x86_64.rpm
rpm -ivh mysql-community-devel-5.7.25-1.el7.x86_64.rpm
rpm -ivh mysql-community-libs-compat-5.7.25-1.el7.x86_64.rpm
rpm -ivh mysql-community-client-5.7.25-1.el7.x86_64.rpm
yum install net-tools
yum install libaio
rpm -ivh mysql-community-server-5.7.25-1.el7.x86_64.rpm
说明1：安装过程中提示缺少net-tools依赖，使用yum安装
        说明2：可以通过指令升级现有软件及系统内核
yum update
⑤：启动mysql
systemctl status mysqld        查看mysql服务状态
systemctl start mysqld        启动mysql服务
说明：可以设置开机时启动mysql服务，避免每次开机启动mysql
systemctl enable mysqld        开机启动mysql服务
netstat -tunlp            查看已经启动的服务
netstat -tunlp | grep mysql

ps -ef | grep mysql          查看mysql进程
⑥：登录MySQL数据库，查阅临时密码
cat /var/log/mysqld.log            查看文件内容
cat /var/log/mysqld.log | grep password        查看文件内容中包含password的行信息
冒号后面的是密码，注意空格
⑦：登录MySQL，修改密码，开放访问权限
mysql -uroot –p                登录mysql（使用临时密码登录）
#修改密码
set global validate_password_length=4;        设置密码长度最低位数
set global validate_password_policy=LOW;        设置密码安全等级低，便于密码可以修改成root
set password = password('root');         设置密码为root
#开启访问权限
grant all on *.* to 'root'@'%' identified by 'root';
flush privileges;
⑧：测试MySQL数据库是否正常工作
show databases;


安装lrzsz
操作步骤：
1、搜索lrzsz安装包，命令为yum list lrzsz
2、使用yum命令在线安装，命令为yum install lrzsz.x86_64
Yum（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。

rz



项目部署
手工部署项目
①：在IDEA中开发SpringBoot项目并打成jar包
②：将jar包上传到Linux服务器
mkdir /usr/local/app        创建目录，将项目jar包放到此目录
③：启动SpringBoot程序
④：检查防火墙，确保8080端口对外开放，访问SpringBoot项目
⑤：改为后台运行SpringBoot程序，并将日志输出到日志文件
目前程序运行的问题
线上程序不会采用控制台霸屏的形式运行程序，而是将程序在后台运行
线上程序不会将日志输出到控制台，而是输出到日志文件，方便运维查阅信息


nohup 命令：英文全称 no hang up（不挂起），用于不挂断地运行指定命令，退出终端不会影响程序的运行
语法格式： nohup Command [ Arg … ] [&]
参数说明：
Command：要执行的命令
Arg：一些参数，可以指定输出文件
&：让命令在后台运行
举例：
nohup java -jar boot工程.jar &> hello.log  &        后台运行java -jar命令，并将日志输出到hello.log文件
[root@192 app]# nohup java -jar idea_java_workspase_03_reggie_take_out-1.0-SNAPSHOT.jar &> hello.log &
⑥：停止SpringBoot程序
ps -ef | grep java
[root@192 app]# kill -9 13028





通过Shell脚本自动部署项目
操作步骤：
1、在Linux中安装Git
2、在Linux中安装maven
3、编写Shell脚本（拉取代码、编译、打包、启动）
4、为用户授予执行Shell脚本的权限
5、执行Shell脚本
①：在Linux中安装Git
yum list git            列出git安装包
yum install git            在线安装git
②：使用Git克隆代码
cd /usr/local/
git clone https://github.com/s0622j/idea_java_workspase_03_reggie_take_out.git
③：将资料中提供的maven安装包上传到Linux，在Linux中安装maven
tar -zxvf apache-maven-3.5.4-bin.tar.gz -C /usr/local
vim /etc/profile        修改配置文件，加入如下内容
export MAVEN_HOME=/usr/local/apache-maven-3.5.4
export PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH


source /etc/profile
mvn –version
vim /usr/local/apache-maven-3.5.4/conf/settings.xml      修改配置文件内容如下
<localRepository>/usr/local/repo</localRepository>
④：将资料中提供的Shell脚本文件复制到Linux
Shell脚本（shell script），是一种Linux系统中的脚本程序。
使用Shell脚本编程跟 JavaScript、Java编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。
对于Shell脚本编写不作为本课程重点内容，直接使用课程资料中提供的脚本文件bootStart.sh即可。
⑤：为用户授权
⑥：执行Shell脚本
⑦：设置静态ip
修改文件/etc/sysconfig/network-scripts/ifcfg-ens33，内容如下：


TYPE="Ethernet"
PROXY_METHOD="none"
BROWSER_ONLY="no"
BOOTPROTO="static"        # 使用静态IP地址，默认为dhcp
IPADDR="192.168.138.100"    # 设置的静态IP地址
NETMASK="255.255.255.0"    # 子网掩码
GATEWAY="192.168.138.2"    # 网关地址
DNS1="192.168.138.2"     # DNS服务器
DEFROUTE="yes"
IPV4_FAILURE_FATAL="no"
IPV6INIT="yes"
IPV6_AUTOCONF="yes"
IPV6_DEFROUTE="yes"
IPV6_FAILURE_FATAL="no"
IPV6_ADDR_GEN_MODE="stable-privacy"
NAME="ens33"
UUID="95b614cd-79b0-4755-b08d-99f1cca7271b"
DEVICE="ens33"
ONBOOT="yes"                 #是否开机启用
⑧：重启网络服务
注意：重启完网络服务后ip地址已经发生了改变，此时FinalShell已经连接不上Linux系统，
需要创建一个新连接才能连接到Linux。







#!/bin/sh
echo =================================
echo  自动化部署脚本启动
echo =================================


echo 停止原来运行中的工程
APP_NAME=helloworld


tpid=`ps -ef|grep $APP_NAME|grep -v grep|grep -v kill|awk '{print $2}'`
if [ ${tpid} ]; then
    echo 'Stop Process...'
    kill -15 $tpid
fi
sleep 2
tpid=`ps -ef|grep $APP_NAME|grep -v grep|grep -v kill|awk '{print $2}'`
if [ ${tpid} ]; then
    echo 'Kill Process!'
    kill -9 $tpid
else
    echo 'Stop Success!'
fi


echo 准备从Git仓库拉取最新代码
cd /usr/local/helloworld


echo 开始从Git仓库拉取最新代码
git pull
echo 代码拉取完成


echo 开始打包
output=`mvn clean package -Dmaven.test.skip=true`


cd target


echo 启动项目
nohup java -jar helloworld-1.0-SNAPSHOT.jar &> helloworld.log &
echo 项目启动完成
##########################################################################

